package com.boventech.cms.service.download.impl;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.apache.commons.io.FileUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.boventech.cms.dao.download.AttachmentDao;
import com.boventech.cms.module.download.Attachment;
import com.boventech.cms.module.download.PublicAccessStrategy;
import com.boventech.cms.module.node.Entry;
import com.boventech.cms.module.user.User;
import com.boventech.cms.module.web.PageIndex;
import com.boventech.cms.service.download.AttachmentService;
import com.boventech.cms.service.impl.StorageServiceImpl;
import com.boventech.util.file.FileUtil;
import com.boventech.util.math.Util;

@Service
@Transactional
public class AttachmentServiceImpl extends StorageServiceImpl implements AttachmentService{
    
    private Logger log = LoggerFactory.getLogger(AttachmentServiceImpl.class);

    private AttachmentDao attachmentDao;
    
    public void delete(Attachment attachment) {
        this.attachmentDao.delete(attachment);
    }

    public Attachment findById(Integer attachmentId) {
        return this.attachmentDao.findById(attachmentId);
    }

    public List<Attachment> list(PageIndex pageIndex) {
        return this.attachmentDao.list(pageIndex);
    }

    public void save(Attachment attachment) {
        this.attachmentDao.save(attachment);
    }

    public void update(Attachment attachment) {
        this.attachmentDao.update(attachment);
    }

    public void setAttachmentDao(AttachmentDao attachmentDao) {
        this.attachmentDao = attachmentDao;
    }

	public String getAttachmentFileNameById(Integer attachmentId) {
		Attachment attachment = this.attachmentDao.findById(attachmentId);
		return getNameFromAttachment(attachment);
	}

	private String getNameFromAttachment(Attachment attachment) {
		return attachment != null ? attachment.getOrginalName() : null;
	}

	public List<Attachment> getRemovedAttachments(Integer[] reservedIds) {
		return this.attachmentDao.listByIds(reservedIds);
	}

	public List<Attachment> save(File[] attachments,
			String[] attachmentFileNames, String[] attachmentContentTypes,
			User user) {
		List<Attachment> atts = new ArrayList<Attachment>(attachments.length);
		for(int i=0;i<attachments.length;i++){
			String fileName = Util.getRandomNumber() + FileUtil.getExt(attachmentFileNames[i]);
			String baseDir = this.getRealAttachmentPath();
			String filePath = File.separator + user.getId();
			File destination = FileUtil.newFile(baseDir + filePath, fileName);
			try {
				FileUtils.copyFile(attachments[i], destination);
				String path = this.getBaseAttachmentPath() + filePath + File.separator + fileName;
				Attachment attachment = new Attachment();
				attachment.setFilepath(path);
				attachment.setFileName(fileName);
				attachment.setOrginalName(attachmentFileNames[i]);
				attachment.setContentType(attachmentContentTypes[i]);
				attachment.setAccessStrategy(new PublicAccessStrategy());
				atts.add(attachment);
			} catch (IOException e) {
				log.info(e.getMessage());
			}
		}
		return atts;
	}

	public void removeAttachments(Entry entry, List<Integer> removeIds) {
		Iterator<Attachment> atts = entry.getAttachments().iterator();
		while (atts.hasNext()) {
			Attachment att = atts.next();
			if(removeIds.contains(att.getId()))
				atts.remove();
		}
	}
	
	public Attachment findByFilePath(String filePath) {
		List<Attachment> attachments = this.attachmentDao.findByFilepath(filePath); 
		return attachments != null && attachments.size() > 0 ? attachments.get(0) : null;
	}

}
